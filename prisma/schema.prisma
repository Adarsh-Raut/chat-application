// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  username  String         @unique
  // email      String    @unique
  // password   String    // Store hashed password here
  createdAt DateTime       @default(now())
  messages  Message[] // Messages sent by the user
  chatRooms UserChatRoom[] // Relationship through the join table

  // Additional fields like profile picture or status can be added here
}

model ChatRoom {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  users     UserChatRoom[] // Relationship through the join table
  messages  Message[]

  // Optional: fields like description or last activity timestamp can be added
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  timestamp  DateTime @default(now())
  userId     Int // ID of the user who sent the message
  chatRoomId Int // ID of the chat room the message belongs to
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

/// Join table for the many-to-many relation between User and ChatRoom
model UserChatRoom {
  userId     Int
  chatRoomId Int
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@id([userId, chatRoomId])
  @@unique([userId, chatRoomId])
}
